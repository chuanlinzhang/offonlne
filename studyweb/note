以下均是服务器端的几个概念

Request：用户请求的信息，用来解析用户的请求信息，包括post、get、cookie、url等信息。
Response：服务器需要反馈给客户端的信息。
Conn：用户的每次请求链接。
Handler：处理请求和生成返回信息的处理逻辑。
handler这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数
http.HandleFunc("/", sayhelloName)嘛。 这个作用就是注册了请求/的路由规则，当请求uri为"/"， 路由就会转到函数sayhelloName，
Go的http有两个核心功能：Conn、ServeMux

中文

有时候我们想通过表单元素获取一个用户的中文名字，但是又为了保证获取的是正确的中文，我们需要进行验证， 而不是用户随便的一些输入。对于中文我们目前有效的验证只有正则方式来验证，如下代码所示

if m, _ := regexp.MatchString("^[\\x{4e00}-\\x{9fa5}]+$", req.Form.Get("realname")); !m {
    return false
}
英文

我们期望通过表单元素获取一个英文值，例如我们想知道一个用户的英文名，应该是astaxie，而不是asta谢。

我们可以很简单的通过正则验证数据：

if m, _ := regexp.MatchString("^[a-zA-Z]+$", req.Form.Get("engname")); !m {
    return false
}
你想知道用户输入的一个Email地址是否正确，通过如下这个方式可以验证：

if m, _ := regexp.MatchString(`^([\w\.\_]{2,10})@(\w{1,}).([a-z]{2,4})$`, req.Form.Get("email")); !m {
    fmt.Println("no")
} else {
    fmt.Println("yes")
}
你想要判断用户输入的手机号码是否正确，通过正则也可以验证：

if m, _ := regexp.MatchString(`^(1[3|4|5|7|8][0-9]\d{4,8})$`, req.Form.Get("mobile")); !m {
    return false
}
下拉菜单

如果我们想要判断表单里面<select>元素生成的下拉菜单中是否有被选中的项目。 有些时候黑客可能会伪造这个下拉菜单不存在的值发送给你，那么如何判断这个值是否是我们预设的值呢？

我们的select可能是这样的一些元素

    <select name="fruit">
    <option value="apple">apple</option>
    <option value="pear">pear</option>
    <option value="banane">banane</option>
    </select>
那么我们可以这样来验证

slice := []string{"apple", "pear", "banane"}

for _, v := range slice {
    if v == req.Form.Get("fruit") {
        return true
    }
}
return false
单选按钮

如果我们想要判断radio按钮是否有一个被选中了，我们页面的输出可能就是一个男、女性别的选择， 但是也可能一个15岁大的无聊小孩，一手拿着http协议的书，另一只手通过telnet客户端向你的程序在发送请求呢， 你设定的性别男值是1，女是2，他给你发送一个3，你的程序会出现异常吗？ 因此我们也需要像下拉菜单的判断方式类似，判断我们获取的值是我们预设的值，而不是额外的值。

    <input type="radio" name="gender" value="1">男
    <input type="radio" name="gender" value="2">女
那我们也可以类似下拉菜单的做法一样

slice := []int{1,2}

for _, v := range slice {
    if v == req.Form.Get("gender") {
        return true
    }
}

return false
复选框

有一项选择兴趣的复选框，你想确定用户选中的和你提供给用户选择的是同一个类型的数据。

    <input type="checkbox" name="interest" value="football">足球
    <input type="checkbox" name="interest" value="basketball">篮球
    <input type="checkbox" name="interest" value="tennis">网球
对于复选框我们的验证和单选有点不一样，因为接收到的数据是一个slice

slice := []string{"football", "basketball", "tennis"}
a := Slice_diff(req.Form["interest"], slice)
if a == nil {
    return true
}

return false
上面这个函数Slice_diff包含在我开源的一个库里面(操作slice和map的库)， https://github.com/astaxie/beeku
身份证号码

如果我们想验证表单输入的是否是身份证，通过正则也可以方便的验证，但是身份证有15位和18位，我们两个都需要验证


    //验证15位身份证，15位的是全部数字
    if m, _ := regexp.MatchString(`^(\d{15})$`, req.Form.Get("usercard")); !m {
        return false
    }

    //验证18位身份证，18位前17位为数字，最后一位是校验位，可能为数字或字符X。
    if m, _ := regexp.MatchString(`^(\d{17})([0-9]|X)$`, req.Form.Get("usercard")); !m {
        return false
    }


//

renderform 使用
定义 struct:

type User struct {
	Id    int         `form:"-"`
	Name  interface{} `form:"username"`
	Age   int         `form:"age,text,年龄："`
	Sex   string
	Intro string `form:",textarea"`
}
StructTag 的定义用的标签用为 form，和 ParseForm 方法 共用一个标签，标签后面有三个可选参数，用 , 分割。第一个参数为表单中类型的 name 的值，如果为空，则以 struct field name 为值。第二个参数为表单组件的类型，如果为空，则为 text。表单组件的标签默认为 struct field name 的值，否则为第三个值。
如果 form 标签只有一个值，则为表单中类型 name 的值，除了最后一个值可以忽略外，其他位置的必须要有 , 号分割，如：form:",,姓名："
如果要忽略一个字段，有两种办法，一是：字段名小写开头，二是：form 标签的值设置为 -
现在的代码版本只能实现固定的格式，用 br 标签实现换行，无法实现 css 和 class 等代码的插入。所以，要实现 form 的高级排版，不能使用 renderform 的方法，而需要手动处理每一个字段。
controller：

func (this *AddController) Get() {
    this.Data["Form"] = &User{}
    this.TplName = "index.tpl"
}
Form 的参数必须是一个 struct 的指针。

template:

<form action="" method="post">
{{.Form | renderform}}
</form>
上面的代码生成的表单为：

	Name: <input name="username" type="text" value="test"></br>
	年龄：<input name="age" type="text" value="0"></br>
	Sex: <input name="Sex" type="text" value=""></br>
	Intro: <input name="Intro" type="textarea" value="">